#!/usr/bin/env python3

import sys
import geoip2.database
import os
import cyberprobe.analytic as q
import cyberprobe.cyberprobe_pb2 as pb
import ipaddress
from prometheus_client import Counter, Info

try:
    db = os.getenv("GEOIP_DB", "/usr/share/GeoIP/GeoLite2-City.mmdb")
    geo = geoip2.database.Reader(db)
except Exception as e:
    print("Exception:", e)
    print("GeoIP2 city data could not be configured.")
    print("No city geo will be generated.")
    geo = None

try:
    db2 = os.getenv("GEOIP_DB", "/usr/share/GeoIP/GeoLite2-ASN.mmdb")
    geo2 = geoip2.database.Reader(db2)
except Exception as e:
    print("Exception:", e)
    print("GeoIP2 ASN data could not be configured.")
    print("No ASN data will be generated.")
    geo2 = None

match_cases = Counter('geo_matches', 'Match cases', ['case'])
countries = Counter('geo_country', 'Identified countries', ['country'])

info = Info('geoip', 'GeoIP configuration')
info.info({
    'geoip_city_loaded': 'true' if geo else 'false',
    'geoip_asn_loaded': 'true' if geo2 else 'false',
})

if len(sys.argv) < 2:
    binding = "cyberprobe"
else:
    binding = sys.argv[1]
    
if len(sys.argv) < 3:
    output = ["geo"]
else:
    output = sys.argv[2].split(",")

class GeoIP(q.EventAnalytic):

    def lookup(self, ip):

        g = None
        asn = None

        if geo:
            try:
                g = geo.city(ip)
            except:
                pass

        if geo2:
            try:
                asn = geo2.asn(ip)
            except:
                pass

        locn = pb.Locations.Location()

        if g is None and asn is None:
            return None

        if g:
            if g.city and g.city.name:
                locn.city = g.city.name
            if g.country.iso_code: locn.iso = g.country.iso_code
            if g.country.name: locn.country = g.country.name
            if g.location.latitude and g.location.longitude:
                locn.latitude = g.location.latitude
                locn.longitude = g.location.longitude
            if g.postal.code: locn.postcode = g.postal.code

        if asn:
            locn.asnum = str(asn.autonomous_system_number)
            locn.asorg = asn.autonomous_system_organization

        return locn
    
    def event(self, ev, properties):

        sip = None
        dip = None

        # Get IP src address.  If there's more than one, assumption is
        # that the outer address (lower in the stack) is the right one
        # to use for geo.
        for v in ev.src:
            if v.protocol == pb.Protocol.ipv4:
                sip = str(ipaddress.ip_address(v.address.ipv4))
                break
            if v.protocol == pb.Protocol.ipv6:
                sip = str(ipaddress.ip_address(v.address.ipv6))
                break

        # Get IP dest address.
        for v in ev.dest:
            if v.protocol == pb.Protocol.ipv4:
                dip = str(ipaddress.ip_address(v.address.ipv4))
                break
            if v.protocol == pb.Protocol.ipv6:
                dip = str(ipaddress.ip_address(v.address.ipv6))
                break

        smatch = False
        dmatch = False
        
        if sip != None:
            g = self.lookup(sip)
            if g != None:
                smatch = True
                if g.iso != "": countries.labels(g.iso).inc()
                ev.location.src.CopyFrom(g)

        if dip != None:
            g = self.lookup(dip)
            if g != None:
                dmatch = True
                if g.iso != "": countries.labels(g.iso).inc()
                ev.location.dest.CopyFrom(g)

        if smatch == False:
            if dmatch == False:
                cas = 'neither'
            else:
                cas = 'dest'
        else:
            if dmatch == False:
                cas = 'src'
            else:
                cas = 'both'
        print(cas)
        match_cases.labels(cas).inc()

        self.output_event(ev, properties)

try:
    GeoIP(binding, output).run()
except Exception as e:
    sys.stderr.write("Exception: %s\n" % str(e))

