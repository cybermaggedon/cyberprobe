#!/usr/bin/env python3

############################################################################

import sys
from cassandra.cluster import Cluster
import cyberprobe.analytic as q
import cyberprobe.cyberprobe_pb2 as pb
import ipaddress

############################################################################

if len(sys.argv) < 2:
    binding = "ioc"
else:
    binding = sys.argv[1]

if len(sys.argv) < 3:
    contacts = ["127.0.0.1"]
else:
    contacts = sys.argv[2].split(",")

class Cassandra(q.EventAnalytic):

    def __init__(self, binding, contacts):

        self.binding = binding

        cluster = Cluster(contacts)

        self.session = cluster.connect()

        self.session.execute("""
            CREATE KEYSPACE IF NOT EXISTS cyberprobe WITH REPLICATION = {
                'class': 'SimpleStrategy', 'replication_factor': '1'
            }
        """)

        self.session.set_keyspace("cyberprobe")

        self.session.execute("""
            CREATE TYPE IF NOT EXISTS dns_query ( 
                name text, type text, cls text 
            )
        """)

        self.session.execute("""
            CREATE TYPE IF NOT EXISTS dns_answer (
                name text, type text, cls text, address inet
            )
        """)

        self.session.execute("""
            CREATE TYPE IF NOT EXISTS http_request ( method text )
        """)

        self.session.execute("""
            CREATE TYPE IF NOT EXISTS http_response ( status text, code int )
        """)

        self.session.execute("""
            CREATE TABLE IF NOT EXISTS event (
                id text, time timestamp, action text, device text,
                network text,
                srcip inet, destip inet, srcport int, destport int,
                protocol text, dns_type text, 
                url text,
                dns_query list<frozen<dns_query>>,
                dns_answer list<frozen<dns_answer>>, 
                http_request frozen<http_request>,
                http_response frozen<http_response>,
                header map<text, text>,
                primary key(device, action, time, id)
            )
        """)

        self.session.execute("""
            CREATE INDEX IF NOT EXISTS event_srcip ON event (srcip)
        """)

        self.session.execute("""
            CREATE INDEX IF NOT EXISTS event_destip ON event (destip)
        """)

        self.session.execute("""
            CREATE INDEX IF NOT EXISTS event_srcport ON event (srcport)
        """)

        self.session.execute("""
            CREATE INDEX IF NOT EXISTS event_destport ON event (destport)
        """)

        self.statement = self.session.prepare("""
            INSERT INTO event (
                id, time, action, device, network,
                srcip, destip, srcport, destport, protocol, 
                dns_type, dns_query, dns_answer, http_request,
                http_response, url, header)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """)

        super().__init__(binding)

        print("Initialisation complete.")

    def cass_output(self, obs):
         self.session.execute(self.statement, obs)

    def event(self, ev, properties):

        if ev.action == pb.Action.connection_up:
            return

        if ev.action == pb.Action.connection_down:
            return

        sip = None
        sport = None
        dip = None
        dport = None
        proto = None

        for v in ev.src:
            if v.protocol == pb.Protocol.ipv4 and sip == None:
                sip = str(ipaddress.ip_address(v.address.ipv4))
            if v.protocol == pb.Protocol.ipv6 and sip == None:
                sip = str(ipaddress.ip_address(v.address.ipv6))
            if v.protocol == pb.Protocol.tcp and sport == None:
                sport = v.address.port
                proto = "tcp"
            if v.protocol == pb.Protocol.udp and sport == None:
                sport = v.address.port
                proto = "udp"

        for v in ev.dest:
            if v.protocol == pb.Protocol.ipv4 and dip == None:
                dip = str(ipaddress.ip_address(v.address.ipv4))
            if v.protocol == pb.Protocol.ipv6 and dip == None:
                dip = str(ipaddress.ip_address(v.address.ipv6))
            if v.protocol == pb.Protocol.tcp and dport == None:
                dport = v.address.port
            if v.protocol == pb.Protocol.udp and dport == None:
                dport = v.address.port

        # id, time, action, device, network, srcip, destip, srcport, destport,
        # protocol, dns_type, dns_query, dns_answer, http_request,
        # http_response, url, header)

        header = None
        if ev.action == pb.Action.http_request:
            header = {k: ev.http_request.header[k]
                      for k in ev.http_request.header}
        elif ev.action == pb.Action.http_response:
            header = {k: ev.http_response.header[k]
                      for k in ev.http_response.header}

        obs = [
            ev.id,
            ev.time.ToDatetime(),
            pb.Action.Name(ev.action),
            ev.device,
            ev.network,

            sip, dip, sport, dport, proto,

            pb.DnsMessageType.Name(ev.dns_message.type)
            if ev.action == pb.Action.dns_message
            else None,

            [[v.name, v.type, getattr(v, "class")]
             for v in ev.dns_message.query]
            if ev.action == pb.Action.dns_message
            else None,
            
            [[v.name, v.type, getattr(v, "class"), self.to_ip(v.address)]
             for v in ev.dns_message.answer]
            if ev.action == pb.Action.dns_message
            else None,

            [ev.http_request.method]
            if ev.action == pb.Action.http_request
            else None,

            [ev.http_response.status, ev.http_response.code]
            if ev.action == pb.Action.http_response
            else None,

            ev.url if ev.url != "" else None,

            header

        ]

        self.cass_output(obs)

    def to_ip(self, addr):

        return None

        if addr.HasField("ipv4"):
            return str(ipaddress.ip_address(addr.ipv4))

        if addr.HasField("ipv6"):
            return str(ipaddress.ip_address(addr.ipv6))

        return None

try:
    Cassandra(binding, contacts).run()
except Exception as e:
    sys.stderr.write("Exception: %s\n" % str(e))

