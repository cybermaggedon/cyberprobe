#!/usr/bin/env python3

############################################################################

import json
import sys
import requests
import time
import cyberprobe.analytic as q
import cyberprobe.cyberprobe_pb2 as pb
import ipaddress

############################################################################

if len(sys.argv) < 2:
    binding = "ioc"
else:
    binding = sys.argv[1]

if len(sys.argv) < 3:
    gaffer = "http://gaffer:8080/rest/v2"
else:
    gaffer = sys.argv[2]

class Gaffer(q.EventAnalytic):

    def __init__(self, binding, gaffer):
        self.session = requests.session()
        self.gaffer = gaffer
        super().__init__(binding)

        print("Connecting to Gaffer...")
        while True:
            url = self.gaffer + "/graph/status"
            try:
                r = requests.get(url)
            except:
                print("Not connected, will retry...")
                time.sleep(2)
                continue

            if r.status_code == 200: break

            print("Not connected, will retry...")
            time.sleep(10)

        print("Connected.")

    def add_edge(self, edges, group, s, d):
        edges.append((group, s, d))

    def add_vertex(self, vertices, group, v):
        vertices.append((group, v))

    def gaffer_output(self, vertices, edges):

        body = {}
        body["input"] = []
        body["class"] = "uk.gov.gchq.gaffer.operation.impl.add.AddElements"
        body["validate"] = True
        body["skipInvalidElements"] = False

        for v in vertices:

            elt = {}
            elt["class"] = "uk.gov.gchq.gaffer.data.element.Entity"
            elt["group"] = v[0]
            elt["vertex"] = v[1]
            elt["properties"] = { "count": 1 }

            body["input"].append(elt)

        for v in edges:

            elt = {}
            elt["directed"] = True
            elt["class"] = "uk.gov.gchq.gaffer.data.element.Edge"
            elt["group"] = v[0]
            elt["source"] = v[1]
            elt["destination"] = v[2]
            elt["properties"] = { "count": 1 }

            body["input"].append(elt)

        while True:
            try:
                url = self.gaffer + "/graph/operations/execute"
                hdr = {"Content-Type": "application/json"}
                r = self.session.post(url,
                                      data=json.dumps(body),
                                      headers=hdr)

                # Ignore a valid HTTP response.  Errors are probably bugs
                # in my code.
                if r.status_code < 200 or r.status_code > 299:
                    sys.stderr.write("gaffer: Error sending to Gaffer\n")
                    sys.stderr.write("gaffer: HTTP code: %s\n" % str(r.status_code))
                    sys.stderr.write(r.text + "\n")
                break
            except Exception as e:
                # Keep retrying for transport errors
                sys.stderr.write("gaffer: Could not deliver to Gaffer...\n")
                sys.stderr.write("gaffer: Exception: %s\n" % str(e))
                time.sleep(1)
  
    def event(self, ev, properties):

        if ev.action == pb.Action.connection_up:
            return

        if ev.action == pb.Action.connection_down:
            return

        vertices = []
        edges = []

        sip = None
        sport = None
        dip = None
        dport = None
        proto = None

        for v in ev.src:
            if v.protocol == pb.Protocol.ipv4 and sip == None:
                sip = str(ipaddress.ip_address(v.address.ipv4))
            if v.protocol == pb.Protocol.ipv6 and sip == None:
                sip = str(ipaddress.ip_address(v.address.ipv6))
            if v.protocol == pb.Protocol.tcp and sport == None:
                sport = str(v.address.port)
                proto = "tcp"
            if v.protocol == pb.Protocol.udp and sport == None:
                sport = str(v.address.port)
                proto = "udp"

        for v in ev.dest:
            if v.protocol == pb.Protocol.ipv4 and dip == None:
                dip = str(ipaddress.ip_address(v.address.ipv4))
            if v.protocol == pb.Protocol.ipv6 and dip == None:
                dip = str(ipaddress.ip_address(v.address.ipv6))
            if v.protocol == pb.Protocol.tcp and dport == None:
                dport = str(v.address.port)
            if v.protocol == pb.Protocol.udp and dport == None:
                dport = str(v.address.port)

        if sip != None and sport != None and dip != None and \
           dport != None and proto == "tcp":
            src = sip + ":" + sport
            dest = dip + ":" + dport
            self.add_vertex(vertices, "ip", sip)
            self.add_vertex(vertices, "ip", dip)
            self.add_edge(edges, "ipflow", sip, dip)
            self.add_vertex(vertices, "tcp", src)
            self.add_vertex(vertices, "tcp", dest)
            self.add_edge(edges, "tcpflow", src, dest)

            if ev.url != "" and ev.action == pb.Action.http_request:
                self.add_edge(edges, "httprequest", src, ev.url)

            if ev.action == pb.Action.dns_message:
                for v in ev.dns_message.query:
                    if v.name != "":
                        self.add_edge(edges, "dnsrequest", src, v.name)

        if sip != None and sport != None and dip != None and \
           dport != None and proto == "udp":
            src = sip + ":" + sport
            dest = dip + ":" + dport
            self.add_vertex(vertices, "ip", sip)
            self.add_vertex(vertices, "ip", dip)
            self.add_edge(edges, "ipflow", sip, dip)
            self.add_vertex(vertices, "udp", src)
            self.add_vertex(vertices, "udp", dest)
            self.add_edge(edges, "udpflow", src, dest)

            if ev.action == pb.Action.dns_message:
                for v in ev.dns_message.query:
                    if v.name != "":
                        self.add_edge(edges, "dnsrequest", src, v.name)

        # Skip output if nothing to do
        if len(vertices) == 0 or len(edges) == 0: return
        
        self.gaffer_output(vertices, edges)

try:
    Gaffer(binding, gaffer).run()
except Exception as e:
    sys.stderr.write("Exception: %s\n" % str(e))

