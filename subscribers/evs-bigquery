#!/usr/bin/env python3

import json
import sys
import requests
import cyberprobe.qcomms as q

from httplib2 import Http
from oauth2client.service_account import ServiceAccountCredentials
from apiclient.discovery import build
import googleapiclient.errors

# Don't forget to update schema below.
wanted_http_headers = {
    'Accept': True,
    'Accept-Charset': True,
    'Accept-Language': True,
    'Access-Control-Allow-Origin': True,
    'Authorization': True,
    'Connection': True,
    'Content-Encoding': True,
    'Content-Language': True,
    'Content-Location': True,
    'Content-Type': True,
    'Cookie': True,
    'Date': True,
    'ETag': True,
    'Forwarded': True,
    'Host': True,
    'Link': True,
    'Location': True,
    'Origin': True,
    'Proxy-Authorization': True,
    'Referer': True,
    'Server': True,
    'Set-Cookie': True,
    'Upgrade': True,
    'User-Agent': True,
    'Via': True,
    'WWW-Authenticate': True,
    'X-Forwarded-For': True,
    'X-Forwarded-Host': True
}

############################################################################

if len(sys.argv) < 2:
    binding = "ioc"
else:
    binding = sys.argv[1]

if len(sys.argv) < 3:
    private = "/etc/cyberprobe/private.json"
else:
    private = sys.argv[2]

if len(sys.argv) < 4:
    project = None
else:
    project = sys.argv[3]

if len(sys.argv) < 5:
    dataset = "cyberprobe"
else:
    dataset = sys.argv[4]

if len(sys.argv) < 6:
    table = "cyberprobe"
else:
    table = sys.argv[5]

############################################################################

# Creds
scopes = ['https://www.googleapis.com/auth/bigquery']

credentials = ServiceAccountCredentials.from_json_keyfile_name(private,
                                                               scopes=scopes)

if project == None:
    project = json.loads(open(private,'r').read())['project_id']
    print(project)

http = Http()
http_auth = credentials.authorize(http)
service = build('bigquery', 'v2', http=http_auth)
tables = service.tables()
tabledata = service.tabledata()

############################################################################

# Create table if not exists.

try:
    table_info = tables.get(projectId=project, datasetId=dataset,
                            tableId=table).\
                            execute(http)
    found=True
except googleapiclient.errors.HttpError:
    found=False

if found:
    print("Table %s exists." % table)
else:

    body = {
        "tableReference": {
            "projectId": project,
            "datasetId": dataset,
            "tableId": table
        },
        "kind": "bigquery#table",
        "description": "cyberprobe event table",
        "schema": {
            "fields": [
                {
                    "name": "id",
                    "mode": "REQUIRED",
                    "type": "STRING"
                },
                {
                    "name": "time",
                    "mode": "REQUIRED",
                    "type": "TIMESTAMP"
                },
                {
                    "name": "action",
                    "mode": "REQUIRED",
                    "type": "STRING"
                },
                {
                    "name": "device",
                    "mode": "REQUIRED",
                    "type": "STRING"
                },
                {
                    "name": "udp_src",
                    "mode": "NULLABLE",
                    "type": "INTEGER"
                },
                {
                    "name": "udp_dest",
                    "mode": "NULLABLE",
                    "type": "INTEGER"
                },
                {
                    "name": "tcp_src",
                    "mode": "NULLABLE",
                    "type": "INTEGER"
                },
                {
                    "name": "tcp_dest",
                    "mode": "NULLABLE",
                    "type": "INTEGER"
                },
                {
                    "name": "ipv4_src",
                    "mode": "NULLABLE",
                    "type": "STRING"
                },
                {
                    "name": "ipv4_dest",
                    "mode": "NULLABLE",
                    "type": "STRING"
                },
                {
                    "name": "type",
                    "mode": "NULLABLE",
                    "type": "STRING"
                },
                {
                    "name": "queries",
                    "mode": "REPEATED",
                    "type": "RECORD",
                    "fields": [
                        {
                            "name": "name",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "type",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "class",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        }
                    ]
                },
                {
                    "name": "answers",
                    "mode": "REPEATED",
                    "type": "RECORD",
                    "fields": [
                        {
                            "name": "name",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "type",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "class",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "address",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        }
                    ]
                },
                {
                    "name": "method",
                    "mode": "NULLABLE",
                    "type": "STRING"
                },
                {
                    "name": "status",
                    "mode": "NULLABLE",
                    "type": "STRING"
                },
                {
                    "name": "code",
                    "mode": "NULLABLE",
                    "type": "INTEGER"
                },
                {
                    "name": "size",
                    "mode": "NULLABLE",
                    "type": "INTEGER"
                },
                {
                    "name": "header",
                    "mode": "NULLABLE",
                    "type": "RECORD",
                    "fields": [
                        {
                            "name": "accept",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "acceptcharset",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "acceptlanguage",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "accesscontrolalloworigin",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "authorization",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "connection",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "contentencoding",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "contentlanguage",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "contentlocation",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "contenttype",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "cookie",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "date",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "etag",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "forwarded",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "host",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "link",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "location",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "origin",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "proxyauthorization",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "referer",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "server",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "setcookie",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "upgrade",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "useragent",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "via",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "wwwauthenticate",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "xforwardedfor",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        },
                        {
                            "name": "xforwardedhost",
                            "mode": "NULLABLE",
                            "type": "STRING"
                        }
                    ]
                },
                {
                    "name": "url",
                    "mode": "NULLABLE",
                    "type": "STRING"
                },
                {
                    "name": "from",
                    "mode": "NULLABLE",
                    "type": "STRING"
                },
                {
                    "name": "to",
                    "mode": "REPEATED",
                    "type": "STRING"
                }
            ]
        }
    }

    try: 
        table_info = tables.insert(projectId=project, datasetId=dataset,
                                   body=body).execute(http)
        print("Table %s created." % table)
    except googleapiclient.errors.HttpError as e:
        print("Table creation failed.")
        print(e)
        sys.exit(0)

############################################################################

def init():
    pass

def bq_output(obs, id):

    body = {
        "kind": "biquery#tableDataInsertAllRequest",
        "rows": [
            {
                "json": obs
            }
        ]
    }

    try:
        result = tabledata.insertAll(projectId=project, datasetId=dataset,
                                     tableId=table, body=body).\
                                     execute(http)
        if "insertErrors" in result:
            print(json.dumps(obs))
            print(json.dumps(result))
    except googleapiclient.errors.HttpError as e:
        print("Table insert failed.")
        print(e)

    return

    obs = {
        es_object: obs
        }

    u = "%s%s/%s/%s?ttl=%s" % (es_url, es_index, es_object, id, ttl)

    r = requests.put(u, data=json.dumps(obs),
                     headers={"Content-Type": "application/json"})
    if r.status_code != 201:
        print("Error sending to BQ")
        print("HTTP code: " + str(r.status_code))

############################################################################

# FIXME: Uses old schema
def handle(msg, output):

    ev = json.loads(msg)
    
    id = ev["id"]

    ob = {
        "id": id,
        "action": ev["action"],
        "device": ev["device"],
        "time": ev["time"]
    }

    if "url" in ev: ob["url"] = ev["url"]
    
    if "dns_message" in ev:

        if "query" in ev["dns_message"]:

            name = []

            for v in ev["dns_message"]["query"]:
                if "name" in v: name.append(v["name"])

            ob["queries"] = name

        if "answer" in ev["dns_message"]:

            address = []

            for v in ev["dns_message"]["answer"]:
                if "address" in v: address.append(v["address"])

            ob["answers"] = address

        ob["type"] = ev["dns_message"]["type"]

    if "indicators" in ev:

        tpe = []
        id = []
        value = []
        desc = []

        for v in ev["indicators"]:
            tpe.append(v["type"])
            id.append(v["id"])
            value.append(v["value"])
            desc.append(v["description"])

    if "http_request" in ev:
        ob["method"] = ev["http_request"]["method"]
        ob["header"] = {}
        for k in ev["http_request"]["header"]:
            nk = k.replace("-", "").lower()
            if k in wanted_http_headers:
                ob["header"][nk] = ev["http_request"]["header"][k]

    if "http_response" in ev:
        ob["code"] = ev["http_response"]["code"]
        ob["status"] = ev["http_response"]["status"],
        ob["header"] = {}
        for k in ev["http_response"]["header"]:
            nk = k.replace("-", "").lower()
            if k in wanted_http_headers:
                ob["header"][nk] = ev["http_response"]["header"][k]

    if "ftp_request" in ev:
        ob["command"] = ev["ftp_request"]["command"]

    if "ftp_response" in ev:
        ob["status"] = ev["ftp_response"]["status"]

    src = {}

    if "src" in ev:
        for v in ev["src"]:
            if v.find(":") < 0:
                cls = v
                addr = ""
            else:
                cls = v[0:v.find(":")]
                addr = v[v.find(":") + 1:]

            if cls not in src:
                src[cls] = []

            src[cls].append(addr)

        ob["src"] = src

    dest = {}

    if "dest" in ev:
        for v in ev["dest"]:
            if v.find(":") < 0:
                cls = v
                addr = ""
            else:
                cls = v[0:v.find(":")]
                addr = v[v.find(":") + 1:]

            if cls not in dest:
                dest[cls] = []

            dest[cls].append(addr)

        ob["dest"] = dest

    if "src" in ev:
        for v in ev["src"]:
            if v.find(":") < 0:
                cls = v
                addr = ""
            else:
                cls = v[0:v.find(":")]
                addr = v[v.find(":") + 1:]

            if cls == "ipv4":
                observation[cls + "_src"] = addr

            if cls == "tcp" or cls == "udp":
                observation[cls + "_src"] = int(addr)

    if "dest" in ev:
        for v in ev["dest"]:
            if v.find(":") < 0:
                cls = v
                addr = ""
            else:
                cls = v[0:v.find(":")]
                addr = v[v.find(":") + 1:]

            if cls == "ipv4":
                observation[cls + "_dest"] = addr

            if cls == "tcp" or cls == "udp":
                observation[cls + "_dest"] = int(addr)

    bq_output(observation, id)

    
############################################################################

init()
import time

try:
    q.subscribe(binding, handle)
except Exception as e:
    sys.stderr.write("Exception: %s\n" % str(e))

