
@c @ifnottex
@node Top
@top Cyberprobe

This is the manual for Cyberprobe (version @value{VERSION}, @value{UPDATED}).

@image{cyberprobe-overview,125mm,,png}

@cindex Packet inspection
@cindex DPI
Cyberprobe is a network packet inspection toolkit (Deep Packet Inspection)
for real-time monitoring of networks.  This has applications in network
monitoring, intrusion detection, forensic analysis, and as a defensive
platform.  Cyberprobe packet inspection works on physical networks, and
also in cloud VPCs.  There are features that allow cloud-scale deployments.

This is not a single, monolithic intrusion detection toolkit which does
everything you want straight out of the box.  If that's what you need,
I would suggest you look elsewhere.  Instead, Cyberprobe is a set of flexible
components which can combined in many ways
to manage a wide variety of packet inspection tasks.  If you want to build
custom network analytics there are many interfaces that make this
straightforward.

The project maintains a number of components, including:

@cindex @command{cyberprobe}
@cindex @command{cybermon}
@cindex Snort

@itemize @bullet

@item
@command{cyberprobe}, which collects data packets and forwards them a network
stream protocol in real time.  Packet collection can be target with IP
addresses, CIDR ranges or full-take.  Collected packets are tagged with a
device identifier.  @command{cyberprobe} can be integrated with Snort to allow
dynamic targeting of IP addresses in response to a Snort rule hitting.

@item
@command{cybermon}, which receives collected packet streams, performs stateful
processing and creates a stream of observations describing network events.
The events can be consumed in many different ways e.g. the events can be
delivered to a pub/sub system, or presented to a gRPC service.
The event handling is implemented as a function written in Lua, so you can
add your own custom event handling.

@item
a set of subscribers which can be used to do things with the captured data
e.g. store to ElasticSearch, Cassandra or Gaffer.

@end itemize

The architecture has support for AWS Traffic Mirroring, and
supports cloud-scale deployments.

@c @end ifnottex

@menu
* Overview::
* Obtaining the software::
* Quick start tutorial::
* Running cyberprobe/cybermon at boot time::
* The pub/sub infrastructure::
* A containerised processing system::
* Integrating with AWS Traffic Mirroring::
* Endace DAG::
* Reference::
* Architecture::
* Index::
@end menu
