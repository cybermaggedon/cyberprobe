
@node Threat indicators
@section Threat indicators
@cindex IOC
@cindex Indicator of Compromise
@cindex Indicator
@cindex Threat indicator
@cindex JSON

Cyberprobe includes a subscriber which apply indicators to events.  When
an event matches an indicator, information about the indicator is tagged
into the event.

Indicator support is present in the @command{evs-detector} subscriber
which reads indicators from a JSON file.

@heading Indicator files

The installation bundle includes a a file containing some
sample indicators, search for @file{indicators.json}, which may be installed
at @file{@value{PREFIX}/share/doc/cyberprobe}.

@heading Deploying theat information to @command{cybermon}

To run using your existing processing pipeline, stop any running
@command{cybermon} and @command{evs-elasticsearch} processes.  Then run
@command{cybermon} to publish to a topic on Pulsar:

@example
cybermon -p 10000 -c @value{SYSCONFDIR}/cyberprobe/pulsar.lua
@end example

Next run @command{cyberprobe-detector} to apply indicator rules.  By default,
this will subscribe to @samp{cyberprobe} and publish to @samp{ioc}:

@example
env INDICATORS=/path/to/indicators.json evs-detector \
    cyberprobe ioc
@end example

Finally, in order to look at the output, we need to subscribe to
@samp{ioc}:

@example
evs-dump ioc
@end example

If you have @command{jq} installed, this will make it easier to see
when indicators hit:

@example
evs-dump ioc | jq --unbuffered .indicators
@end example

This activity should trigger a theat:

@example
wget -q -O- http://www.malware.org/malware.dat
@end example

If this works, you should see the following output:

@example
[
  @{
    "description": "URL of a page serving malware",
    "category": "malware",
    "author": "someone@@example.com",
    "source": "id:3245edd9-e0f3-4982-9406-fbf93b874555",
    "type": "url",
    "value": "http://malware.org/malware.dat"
  @}
]
@end example

This hits on a number of theat indicators. The hostname www.malware.com is
present in a theat indicator, and it is detected in the HTTP request, and
both the DNS query and response. Also, the URL
@code{http://www.malware.org/malware.dat} is in a threat indicator and it is
detected in both the HTTP request and response.

@command{evs-detector} updates its state if
the JSON configuration file has changed.

If you want to load the output of @command{evs-detector} into
ElasticSearch, you can, but you need to subscribe to @samp{ioc}:

@example
evs-elasticsearch ioc
@end example

This results in indicator hit information being loaded into ES.

For more information on indicators, see
@ref{@command{evs-detector} invocation} and
@ref{Cyberprobe indicator format}.

See @url{https://github.com/cybermaggedon/threat-exchanges} for code which
creates indicator sets from threat exchanges.

@heading Conclusion

All done, I hope you enjoyed the tutorial! Any comments on the software, or
tutorial itself are very welcome! Positive, or negative, we want to hear how
you found the experience.

