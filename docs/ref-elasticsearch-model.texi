
@node ElasticSearch model
@section ElasticSearch model
@cindex ElasticSearch
@cindex ElasticSearch, model

@heading Overview

When @command{evs-elasticsearch} is used
observations are created in an ElasticSearch database.
These configuration files call the @file{elastic.lua} utility module.
This section describes the data model used in the ElasticSearch database.

ElasticSearch accepts data in JSON form.  @command{evs-elasticsearch}
uses an
index called @command{cyberprobe} and an object type @command{observation}.

Here is an example of a JSON payload which is emitted for a DNS request:
@example
@{
  "observation": @{
    "type": "query",
    "answers": @{@},
    "device": "123456",
    "dest": @{
      "udp": ["53"],
      "dns": [""],
      "ipv4": ["192.168.1.1"]
    @},
    "queries": @{
      "name": ["news.bbc.co.uk"],
      "type": ["1"],
      "class": ["1"]
    @},
    "src": @{
      "udp": ["57291"],
      "dns": [""],
      "ipv4": ["192.168.1.100"]
    @},
    "time": "20141018T175059.366Z",
    "action": "dns_message",
    "id": 1
  @}
@}
@end example

@heading Common fields

The following fields are emitted for all observations:

@table @code

@item observation
This is a JSON object which describes a Cyberprobe observation.

@item observation.oid
A unique object ID.

@item observation.time
Describes the time of the event in GMT.  The components are:
@itemize
@item
4-digit year
@item
2-digit month
@item
2-digit date
@item
Literal @samp{T}.
@item
2-digit hour (24-hour).
@item
2-digit minute
@item
2-digit second
@item
Literal @samp{.}
@item
3-digit milliseconds
@item
Literal @samp{Z}
@end itemize
e.g. @code{20141018T175059.366Z}.
@item observation.device
@cindex LIID
@cindex Device ID
A string containing the targeted LIID / device ID.

@item observation.action
Describes the type of a Cyberprobe observation.  See @ref{Actions}
below.

@item observation.src
An object describing the full stack of protocol destination addresses.
For each name/value pair, the name is the protocol name, and the value
is an array of strings which are protocol addresses.  For example:
@example
"src": @{
  "udp": ["57291"],
  "dns": [""],
  "ipv4": ["192.168.1.100"]
@}
@end example

This specifies a UDP source port number of 57291, and an IP source address
of @code{192.168.1.100}.  Each protocol layer is list, allowing for more than
one address - protocol tunnels may result in more than IP address, for instance.

@item observation.dest
An object describing the full stack of protocol destination addresses, like
@code{observation.src} above, but for destination addresses.

@end table

@heading Actions
@anchor{Actions}
@cindex ElasticSearch model, actions
@cindex Actions

The following @code{action} fields are defined:

@table @samp
@item connected_up
Records the creation of a stream-orientated connection (currently, only TCP).
This event is created for all connections whether the protocol is
recognised or not.
@item connected_down
Records the closing of a stream-orientated connection (currently, only TCP).
This event is created for all connections whether the protocol is
recognised or not.
@item unrecognised_stream
Records the sending of a PDU on a connection-less transport (currently, only
UDP) whose protocol has not been recognised.
@item unrecognised_datagram
Records the sending of a PDU on a connection-less transport (currently, only
UDP) whose protocol has not been recognised.
@item http_request
Records the sending of an HTTP request.
@item http_response
Records the sending of an HTTP response.
@item dns_message
Records the sending of a DNS message (request and response).
@item icmp
Records the sending of an ICMP message.
@item smtp_command
Records the sending of an SMTP command.  This is a message from client
to server.  Data commands are not recorded with this event - there is an
@samp{smtp_data} event which records this.
@item smtp_response
Records the sending of a response to an SMTP command.  This is a status
message from server to client.
@item smtp_data
Records an SMTP data transaction, including the full SMTP data payload
(essentially an email).
@item ftp_command
Records an FTP command (client to server).
@item ftp_response
Records an FTP response (server to client).
@end table

@heading Connection up
@cindex Connection up

Connection up events are created when connection-orientated transports
(e.g. TCP) are created, and have an @code{action} field of @samp{connection_up}.

@heading Connection down
@cindex Connection down

Connection down events are created when connection-orientated transports
(e.g. TCP) are closed and have an @code{action} field of @samp{connection_down}.

@heading Unrecognised datagram
@cindex Unrecognised datagram

Unrecognised datagram events are created when a datagram is observed
on an unrecognised protocol, and have an @code{action} field of
@samp{unrecognised_datagram}.  Such events include the following fields:
@table @code 
@item observation.data
The datagram payload, base64 encoded.
@end table

@heading Unrecognised stream
@cindex Unrecognised stream

Unrecognised stream events are created when data is observed to be
sent on an unrecognised connection-orientated protocol (e.g. TCP),
and have an @code{action} field of
@samp{unrecognised_stream}.  Such events include the following fields:
@table @code 
@item observation.data
The datagram payload, base64 encoded.
@end table

@heading ICMP
@cindex ICMP

ICMP events are created when an ICMP message is observed
and have an @code{action} field of @samp{icmp}.  Such events include the
following fields:
@table @code 
@item observation.data
The datagram payload, base64 encoded.
@end table

@heading DNS messages

DNS events are created for DNS query and response messages, and have an
@code{action} field of @samp{dns_message}.  Such events include
the following fields:

@table @code 

@item observation.type
Used to describe the type of a DNS message, by interpreting the message flags.
Will be @samp{query} or @samp{response}.

@item observation.queries
Contains a list of DNS queries.  Example:
@example
"queries": [
 @{
    "class: "1",
    "name": "news.bbc.co.uk",
    "type": "1"
 @}
]
@end example

@item observation.answers
Contains a list of DNS responses.  Example:
@example
"answers": [
  @{
    "class: "1",
    "name": "newswww.bbc.net.uk",
    "type": "1"

  @},
  @{
    "class: "1",
    "address": "212.58.246.85",
    "name": "newswww.bbc.net.uk",
    "type": "1"
  @},
  @{
    "class: "1",
    "address": "212.58.246.84",
    "name": "newswww.bbc.net.uk",
    "type": "1"
  @}
]
@end example

@end table

@heading HTTP request
@cindex HTTP request

HTTP request events are created for HTTP requests, and have an
@code{action} field of @samp{http_request}.  Such events include fields:

@table @code

@item observation.method
The HTTP method e.g. @samp{GET}, @samp{POST}.

@item observation.url
The HTTP URL e.g. @samp{http://www.bbc.co.uk/index.html}.

@item observation.header
An object containing the request headers e.g.
@example
@{
  "Accept": "*\/*",
  "Referer": "http:\/\/www.bbc.co.uk\/news\/",
  "Accept-Language": "en-gb,en;q=0.5",
  "Host": "www.bbc.co.uk",
  "Accept-Encoding": "gzip, deflate",
  "Connection": "keep-alive",
  "User-Agent": "Test/5.0"
@}
@end example

@item observation.body
Describes the HTTP body.  This is a base64 encoding of the body.

@end table

@heading HTTP response
@cindex HTTP response

HTTP response events are created for responses to HTTP requests, and have an
@code{action} field of @samp{http_response}.  Such events include
the following fields:

@table @code

@item observation.code
The HTTP status code e.g. @samp{200}.

@item observation.status
The HTTP status response e.g. @samp{OK}.

@item observation.url
The HTTP URL e.g. @samp{http://www.bbc.co.uk/index.html}.  This is obtained
by studying the HTTP request, so will only be present where the HTTP
request is observed.

@item observation.header
An object containing the response headers e.g.
@example
@{
  "Server": "Apache",
  "Content-Type": "text/javascript"
@}
@end example

@item observation.body
Describes the HTTP response body, base64 encoded.

@end table

@heading SMTP command
@cindex SMTP command

SMTP commands events are created when an SMTP command is sent from client
to server, and have an @code{action} field of @samp{smtp_command}.
Such events include the
following fields:
@table @code 
@item observation.command
The SMTP command e.g. @samp{EHLO}.
@end table

@heading SMTP response
@cindex SMTP response

SMTP response events are created when an SMTP response is sent from server
to client, and have an @code{action} field of @samp{smtp_response}.
Such events include the following fields:

@table @code 
@item observation.status
The SMTP status e.g. @samp{400}.
@item observation.text
The SMTP text e.g. @samp{["Hello malware.com.  Pleased to meet you."]}.
@end table

@heading SMTP data
@cindex SMTP data

SMTP data events are created when an SMTP email is sent from client
to server, and have an @code{action} field of @samp{smtp_data}.
Such events include the following fields:

@table @code 
@item observation.from
The SMTP ``from'' address.  A string.
@item observation.to
The SMTP ``to'' addresses.  An array of strings.
@item observation.data
The SMTP payload (RFC822), base64 encoded.
@end table

@heading FTP command
@cindex FTP command

FTP commands events are created when an FTP command is sent from client
to server, and have an @code{action} field of @samp{ftp_command}.
Such events include the
following fields:
@table @code 
@item observation.command
The FTP command.
@end table

@heading FTP response
@cindex FTP response

FTP response events are created when an FTP response is sent from server
to client, and have an @code{action} field of @samp{ftp_response}.
Such events include the following fields:

@table @code 
@item observation.status
The FTP status.
@item observation.text
The FTP text.
@end table
