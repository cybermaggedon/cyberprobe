#!/usr/bin/env python3

import json
import sys
import os
import cyberprobe.analytic as q
import cyberprobe.cyberprobe_pb2 as pb
from cyberprobe.fsm import Fsm, FsmState, FsmCollection
import cyberprobe.indicators as ind
import ipaddress

if len(sys.argv) < 2:
    binding = "geo"
else:
    binding = sys.argv[1]
    
if len(sys.argv) < 3:
    output = "ioc"
else:
    output = "ioc"

iocs_file = os.getenv("INDICATORS", "indicators.json")
mtime = 0

iocs = None
fsc = None

def check_config():

    global mtime
    global iocs
    global fsc
    
    s = os.stat(iocs_file).st_mtime
    if s == mtime: return

    print("Loading IOCs...")

    with open(iocs_file) as f:
        data = f.read()

    obj = json.loads(data)

    iocs = ind.load(obj)
    fsc = FsmCollection.load_from(iocs)
#    print("FSMs:")
#    for v in fsc.fsms:
#        v.dump()
#        print("---")
#    print()
    
    print("Indicator data loaded.")
    mtime = s

def add_indicator(obj, ind):
    obj.indicators.add().CopyFrom(ind)

def check_addresses(obj):

    for v in obj.src:
        if v.protocol == pb.Protocol.ipv4:
            addr = str(ipaddress.ip_address(v.address.ipv4))
            fsc.update(('ipv4', addr))
            fsc.update(('ipv4.src', addr))
        if v.protocol == pb.Protocol.ipv6:
            addr = str(ipaddress.ip_address(v.address.ipv6))
            fsc.update(('ipv6', addr))
            fsc.update(('ipv6.src', addr))
        if v.protocol == pb.Protocol.tcp:
            addr = str(v.address.port)
            fsc.update(('tcp', addr))
            fsc.update(('tcp.src', addr))
        if v.protocol == pb.Protocol.udp:
            addr = str(v.address.port)
            fsc.update(('udp', addr))
            fsc.update(('udp.src', addr))

    for v in obj.dest:
        if v.protocol == pb.Protocol.ipv4:
            addr = str(ipaddress.ip_address(v.address.ipv4))
            fsc.update(('ipv4', addr))
            fsc.update(('ipv4.dest', addr))
        if v.protocol == pb.Protocol.ipv6:
            addr = str(ipaddress.ip_address(v.address.ipv6))
            fsc.update(('ipv6', addr))
            fsc.update(('ipv6.dest', addr))
        if v.protocol == pb.Protocol.tcp:
            addr = str(v.address.port)
            fsc.update(('tcp', addr))
            fsc.update(('tcp.dest', addr))
        if v.protocol == pb.Protocol.udp:
            addr = str(v.address.port)
            fsc.update(('udp', addr))
            fsc.update(('udp.dest', addr))

def check_dns(obj):

    hosts = set()

    if obj.HasField("dns_message") and obj.dns_message.HasField("query"):
        for v in obj.dns_message.query:
            if v.HasField("name"):
                hosts.add(v.name)

    if obj.HasField("dns_message") and obj.dns_message.HasField("answer"):
        for v in obj.dns_message.answer:
            if v.HasField("name"):
                hosts.add(v.name)

    for v in hosts:
        fsc.update(('hostname', v))

def check_url(obj):

    if obj.url != "":
        fsc.update(('url', obj.url))

def check_email(obj):

    emails = set()

    if obj.HasField("smtp_data") and obj.smtp_data.HasField("from"):
        emails.add(getattr(obj.smtp_data, "from"))
    if obj.HasField("smtp_data") and obj.smtp_data.HasField("to"):
        for v in obj.smtp_data.to:
            emails.add(v)

    for v in emails:
        fsc.update(('email', v))

def check_hits(obj):
    inds = fsc.get_hits()
    for ind in inds:
        dmp = ind.descriptor.dump()
        i = pb.Indicator()
        i.description = dmp["description"]
        i.category = dmp["category"]
        i.author = dmp["author"]
        i.source = dmp["source"]
        i.type = dmp["type"]
        i.value = dmp["value"]
        add_indicator(obj, i)

def handle(msg, output):

    try:
        obj = pb.Event()
        obj.ParseFromString(msg.data())

        check_config()

        fsc.init_state()
        check_addresses(obj)
        check_dns(obj)
        check_url(obj)
        check_email(obj)

        fsc.update(('end', ''))

        check_hits(obj)

        data = obj.SerializeToString()
        output(data, msg.properties())

    except Exception as e:
        print(e)

try:
    check_config()
    q.subscribe(binding, handle, output)
except Exception as e:
    sys.stderr.write("Exception: %s\n" % str(e))

