#!/usr/bin/env python3

import json
import sys
import os
import cyberprobe.analytic as q
import cyberprobe.cyberprobe_pb2 as pb
from cyberprobe.fsm import Fsm, FsmState, FsmCollection
import cyberprobe.indicators as ind
import ipaddress
from prometheus_client import Counter, Info, Gauge, Histogram

if len(sys.argv) < 2:
    binding = "geo"
else:
    binding = sys.argv[1]
    
if len(sys.argv) < 3:
    output = ["ioc"]
else:
    output = sys.argv[2].split(",")

info = Info('indicators', 'Indicator configuration')
indicator_count = Gauge('indicator_count', 'Number of indicators')
hits = Histogram('hits', 'Number of hits on an event',
                 buckets=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 20, 25, 50])
category_hits = Counter('hits_on_category', 'Hits by category', ['category'])
type_hits = Counter('hits_on_type', 'Hits by type', ['type'])

class Detector(q.EventAnalytic):

    def __init__(self, binding, outputs=[]):
        self.iocs_file = os.getenv("INDICATORS", "indicators.json")
        self.mtime = 0
        self.iocs = None
        self.fsc = None

        info.info({
            'indicator_file': self.iocs_file
        })

        super().__init__(binding, outputs)

    def check_config(self):

        s = os.stat(self.iocs_file).st_mtime
        if s == self.mtime: return

        print("Loading IOCs...")

        with open(self.iocs_file) as f:
            data = f.read()

        obj = json.loads(data)

        self.iocs = ind.load(obj)
        self.fsc = FsmCollection.load_from(self.iocs)
    #    print("FSMs:")
    #    for v in self.fsc.fsms:
    #        v.dump()
    #        print("---")
    #    print()

        print("Indicator data loaded.")

        indicator_count.set(len(self.iocs.indicators))

        self.mtime = s

    def add_indicator(self, ev, ind):
        ev.indicators.add().CopyFrom(ind)

    def check_addresses(self, ev):

        for v in ev.src:
            if v.protocol == pb.Protocol.ipv4:
                addr = str(ipaddress.ip_address(v.address.ipv4))
                self.fsc.update(('ipv4', addr))
                self.fsc.update(('ipv4.src', addr))
            if v.protocol == pb.Protocol.ipv6:
                addr = str(ipaddress.ip_address(v.address.ipv6))
                self.fsc.update(('ipv6', addr))
                self.fsc.update(('ipv6.src', addr))
            if v.protocol == pb.Protocol.tcp:
                addr = str(v.address.port)
                self.fsc.update(('tcp', addr))
                self.fsc.update(('tcp.src', addr))
            if v.protocol == pb.Protocol.udp:
                addr = str(v.address.port)
                self.fsc.update(('udp', addr))
                self.fsc.update(('udp.src', addr))

        for v in ev.dest:
            if v.protocol == pb.Protocol.ipv4:
                addr = str(ipaddress.ip_address(v.address.ipv4))
                self.fsc.update(('ipv4', addr))
                self.fsc.update(('ipv4.dest', addr))
            if v.protocol == pb.Protocol.ipv6:
                addr = str(ipaddress.ip_address(v.address.ipv6))
                self.fsc.update(('ipv6', addr))
                self.fsc.update(('ipv6.dest', addr))
            if v.protocol == pb.Protocol.tcp:
                addr = str(v.address.port)
                self.fsc.update(('tcp', addr))
                self.fsc.update(('tcp.dest', addr))
            if v.protocol == pb.Protocol.udp:
                addr = str(v.address.port)
                self.fsc.update(('udp', addr))
                self.fsc.update(('udp.dest', addr))

    def check_dns(self, ev):

        hosts = set()

        if ev.HasField("dns_message"):
            for v in ev.dns_message.query:
                if v.name != "":
                    hosts.add(v.name)
            for v in ev.dns_message.answer:
                if v.name != "":
                    hosts.add(v.name)

        for v in hosts:
            self.fsc.update(('hostname', v))

    def check_url(self, ev):

        if ev.url != "":
            self.fsc.update(('url', ev.url))

    def check_email(self, ev):

        emails = set()

        if ev.HasField("smtp_data") and ev.smtp_data.HasField("from"):
            emails.add(getattr(ev.smtp_data, "from"))
        if ev.HasField("smtp_data") and ev.smtp_data.HasField("to"):
            for v in ev.smtp_data.to:
                emails.add(v)

        for v in emails:
            self.fsc.update(('email', v))

    def check_hits(self, ev):
        inds = self.fsc.get_hits()
        hits.observe(len(inds))
        for ind in inds:
            dmp = ind.descriptor.dump()
            i = pb.Indicator()
            i.id = ind.id
            i.description = dmp["description"]
            i.category = dmp["category"]
            i.author = dmp["author"]
            i.source = dmp["source"]
            i.type = dmp["type"]
            i.value = dmp["value"]
            self.add_indicator(ev, i)

            category_hits.labels(i.category).inc()
            type_hits.labels(i.type).inc()

    def event(self, ev, properties):

        try:

            self.check_config()

            self.fsc.init_state()
            self.check_addresses(ev)
            self.check_dns(ev)
            self.check_url(ev)
            self.check_email(ev)

            self.fsc.update(('end', ''))

            self.check_hits(ev)

            self.output_event(ev, properties)

        except Exception as e:
            print(e)


try:
    d = Detector(binding, output)
    d.check_config()
    d.run()
except Exception as e:
    sys.stderr.write("Exception: %s\n" % str(e))

